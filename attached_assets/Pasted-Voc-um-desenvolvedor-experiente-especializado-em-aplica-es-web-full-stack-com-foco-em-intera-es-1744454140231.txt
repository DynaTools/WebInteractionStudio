Voc√™ √© um desenvolvedor experiente especializado em aplica√ß√µes web full-stack com foco em intera√ß√µes humanas e IA. Sua tarefa √© criar um prot√≥tipo funcional de um aplicativo web com as seguintes caracter√≠sticas:

üîπ Objetivo:
Desenvolver uma aplica√ß√£o web que permita a um usu√°rio conversar com um agente virtual (IA), representado por um avatar est√°tico, por meio de uma videochamada em tempo real. O agente deve atuar como tutor de italiano, sempre respondendo em italiano, mesmo quando o usu√°rio fala portugu√™s ou outro idioma. A intera√ß√£o deve ocorrer por fala e texto: o usu√°rio fala (√°udio), o sistema transcreve, a IA responde em texto e gera √°udio em italiano.

üîπ Tecnologias:
Frontend: React, HTML, CSS (visual moderno com bal√µes de fala e avatar).

Backend: Node.js + Express.

Integra√ß√µes:

Agora Web SDK para videochamada (RTC).

OpenAI Whisper API para transcri√ß√£o de fala (STT).

OpenAI GPT (Chat API) para resposta em italiano.

OpenAI TTS (Text-to-Speech API) para gerar fala em italiano.

üîπ Funcionalidades:
Videochamada entre o usu√°rio e o agente IA (avatar est√°tico).

Bot√£o de grava√ß√£o de √°udio: o usu√°rio pressiona para falar.

Transcri√ß√£o do que o usu√°rio falou (usando Whisper).

A IA responde com um texto em italiano (via ChatGPT com prompt fixo).

O texto da IA aparece em um bal√£o de fala junto ao avatar.

A resposta √© tamb√©m falada, usando a API de TTS da OpenAI.

A aplica√ß√£o n√£o deve expor chaves ou tokens ao usu√°rio.

Tokens da Agora devem ser gerados dinamicamente pelo backend.

Todas as chaves e segredos devem ser configuradas via .env.

üîπ Requisitos Visuais:
Interface moderna e amig√°vel, inspirada neste exemplo visual:
Avatar √† esquerda, bal√£o de fala com fonte clara e layout responsivo.

√çcones intuitivos: microfone, encerrar chamada, etc.

Estilo visual compat√≠vel com aplica√ß√µes modernas (rounded, sombras, responsivo).

üîπ Prompt fixo para a IA (ChatGPT):
Voc√™ √© um tutor virtual de l√≠ngua italiana. Sua fun√ß√£o √© conversar com o usu√°rio somente em italiano, ajudando-o a praticar e aprender. Mesmo que o usu√°rio fale em portugu√™s ou outro idioma, responda sempre em italiano simples e claro. Explique termos em italiano se necess√°rio, e incentive o usu√°rio a continuar praticando. Seja paciente, educativo e amig√°vel.

Esse prompt deve ser usado como "system" na chamada ao modelo gpt-3.5-turbo (ou gpt-4, se preferido).

üîπ Regras de desenvolvimento:
Prepare um projeto GitHub completo, com README.md que explique como rodar no GitHub Codespaces.

Use vari√°veis de ambiente para as credenciais (.env.example inclu√≠do).

Inclua package.json com scripts para rodar npm run dev que inicie o frontend e backend (usando concurrently).

O backend deve ter rotas:

/agora-token: para gerar tokens com base no App ID e Certificado.

/chat: recebe o √°udio do usu√°rio, transcreve (Whisper), responde (GPT) e converte em √°udio (TTS).

Documente o deploy e instru√ß√µes para executar uma demonstra√ß√£o funcional confi√°vel.

üîπ Extras (priorit√°rios para o prot√≥tipo):
C√≥digo limpo, modular, com tratamento de erro (mensagens amig√°veis se algo falhar).

Garantia de funcionamento: o prot√≥tipo deve funcionar perfeitamente sem erros.

Se poss√≠vel, logue no console do backend as etapas de processamento: STT, GPT, TTS.

üîπ Requisitos de produ√ß√£o (n√£o obrigat√≥rios no prot√≥tipo):
Seguran√ßa de API (rate limit simples, prote√ß√£o contra abuso).

Possibilidade de evoluir para m√∫ltiplos usu√°rios simult√¢neos (escalabilidade).

Gere agora todo o c√≥digo do projeto, incluindo:

Frontend completo (React).

Backend completo (Node.js + Express).

Integra√ß√µes com Agora e OpenAI.

Arquivo .env.example.

README com instru√ß√µes claras para rodar no Codespaces.

Priorize o bom funcionamento do DEMO. O foco √© impressionar um cliente com uma apresenta√ß√£o impec√°vel.